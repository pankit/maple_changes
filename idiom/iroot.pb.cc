// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "idiom/iroot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace idiom {

namespace {

const ::google::protobuf::Descriptor* iRootEventProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iRootEventProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* iRootProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iRootProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* iRootDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iRootDBProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IdiomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iRootEventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_idiom_2firoot_2eproto() {
  protobuf_AddDesc_idiom_2firoot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "idiom/iroot.proto");
  GOOGLE_CHECK(file != NULL);
  iRootEventProto_descriptor_ = file->message_type(0);
  static const int iRootEventProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootEventProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootEventProto, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootEventProto, type_),
  };
  iRootEventProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iRootEventProto_descriptor_,
      iRootEventProto::default_instance_,
      iRootEventProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootEventProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootEventProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iRootEventProto));
  iRootProto_descriptor_ = file->message_type(1);
  static const int iRootProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, idiom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, count_pair_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, src_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, dst_count_),
  };
  iRootProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iRootProto_descriptor_,
      iRootProto::default_instance_,
      iRootProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iRootProto));
  iRootDBProto_descriptor_ = file->message_type(2);
  static const int iRootDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootDBProto, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootDBProto, iroot_),
  };
  iRootDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iRootDBProto_descriptor_,
      iRootDBProto::default_instance_,
      iRootDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iRootDBProto));
  IdiomType_descriptor_ = file->enum_type(0);
  iRootEventType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_idiom_2firoot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iRootEventProto_descriptor_, &iRootEventProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iRootProto_descriptor_, &iRootProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iRootDBProto_descriptor_, &iRootDBProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_idiom_2firoot_2eproto() {
  delete iRootEventProto::default_instance_;
  delete iRootEventProto_reflection_;
  delete iRootProto::default_instance_;
  delete iRootProto_reflection_;
  delete iRootDBProto::default_instance_;
  delete iRootDBProto_reflection_;
}

void protobuf_AddDesc_idiom_2firoot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021idiom/iroot.proto\022\005idiom\"S\n\017iRootEvent"
    "Proto\022\n\n\002id\030\001 \002(\r\022\017\n\007inst_id\030\002 \002(\r\022#\n\004ty"
    "pe\030\003 \002(\0162\025.idiom.iRootEventType\"\212\001\n\niRoo"
    "tProto\022\n\n\002id\030\001 \002(\r\022\037\n\005idiom\030\002 \002(\0162\020.idio"
    "m.IdiomType\022\020\n\010event_id\030\003 \003(\r\022\027\n\017count_p"
    "air_bool\030\004 \002(\r\022\021\n\tsrc_count\030\005 \002(\r\022\021\n\tdst"
    "_count\030\006 \002(\r\"W\n\014iRootDBProto\022%\n\005event\030\001 "
    "\003(\0132\026.idiom.iRootEventProto\022 \n\005iroot\030\002 \003"
    "(\0132\021.idiom.iRootProto*_\n\tIdiomType\022\021\n\rID"
    "IOM_INVALID\020\000\022\013\n\007IDIOM_1\020\001\022\013\n\007IDIOM_2\020\002\022"
    "\013\n\007IDIOM_3\020\003\022\013\n\007IDIOM_4\020\004\022\013\n\007IDIOM_5\020\005*\230"
    "\001\n\016iRootEventType\022\027\n\023IROOT_EVENT_INVALID"
    "\020\000\022\030\n\024IROOT_EVENT_MEM_READ\020\001\022\031\n\025IROOT_EV"
    "ENT_MEM_WRITE\020\002\022\032\n\026IROOT_EVENT_MUTEX_LOC"
    "K\020\003\022\034\n\030IROOT_EVENT_MUTEX_UNLOCK\020\004", 593);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idiom/iroot.proto", &protobuf_RegisterTypes);
  iRootEventProto::default_instance_ = new iRootEventProto();
  iRootProto::default_instance_ = new iRootProto();
  iRootDBProto::default_instance_ = new iRootDBProto();
  iRootEventProto::default_instance_->InitAsDefaultInstance();
  iRootProto::default_instance_->InitAsDefaultInstance();
  iRootDBProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_idiom_2firoot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_idiom_2firoot_2eproto {
  StaticDescriptorInitializer_idiom_2firoot_2eproto() {
    protobuf_AddDesc_idiom_2firoot_2eproto();
  }
} static_descriptor_initializer_idiom_2firoot_2eproto_;

const ::google::protobuf::EnumDescriptor* IdiomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdiomType_descriptor_;
}
bool IdiomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iRootEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iRootEventType_descriptor_;
}
bool iRootEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int iRootEventProto::kIdFieldNumber;
const int iRootEventProto::kInstIdFieldNumber;
const int iRootEventProto::kTypeFieldNumber;
#endif  // !_MSC_VER

iRootEventProto::iRootEventProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iRootEventProto::InitAsDefaultInstance() {
}

iRootEventProto::iRootEventProto(const iRootEventProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iRootEventProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  inst_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iRootEventProto::~iRootEventProto() {
  SharedDtor();
}

void iRootEventProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iRootEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iRootEventProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iRootEventProto_descriptor_;
}

const iRootEventProto& iRootEventProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idiom_2firoot_2eproto();  return *default_instance_;
}

iRootEventProto* iRootEventProto::default_instance_ = NULL;

iRootEventProto* iRootEventProto::New() const {
  return new iRootEventProto;
}

void iRootEventProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    inst_id_ = 0u;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iRootEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inst_id;
        break;
      }
      
      // required uint32 inst_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .idiom.iRootEventType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (idiom::iRootEventType_IsValid(value)) {
            set_type(static_cast< idiom::iRootEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iRootEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 inst_id = 2;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inst_id(), output);
  }
  
  // required .idiom.iRootEventType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iRootEventProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 inst_id = 2;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inst_id(), target);
  }
  
  // required .idiom.iRootEventType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iRootEventProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 inst_id = 2;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_id());
    }
    
    // required .idiom.iRootEventType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iRootEventProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iRootEventProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iRootEventProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iRootEventProto::MergeFrom(const iRootEventProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iRootEventProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iRootEventProto::CopyFrom(const iRootEventProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iRootEventProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void iRootEventProto::Swap(iRootEventProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iRootEventProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iRootEventProto_descriptor_;
  metadata.reflection = iRootEventProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iRootProto::kIdFieldNumber;
const int iRootProto::kIdiomFieldNumber;
const int iRootProto::kEventIdFieldNumber;
const int iRootProto::kCountPairBoolFieldNumber;
const int iRootProto::kSrcCountFieldNumber;
const int iRootProto::kDstCountFieldNumber;
#endif  // !_MSC_VER

iRootProto::iRootProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iRootProto::InitAsDefaultInstance() {
}

iRootProto::iRootProto(const iRootProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iRootProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  idiom_ = 0;
  count_pair_bool_ = 0u;
  src_count_ = 0u;
  dst_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iRootProto::~iRootProto() {
  SharedDtor();
}

void iRootProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iRootProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iRootProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iRootProto_descriptor_;
}

const iRootProto& iRootProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idiom_2firoot_2eproto();  return *default_instance_;
}

iRootProto* iRootProto::default_instance_ = NULL;

iRootProto* iRootProto::New() const {
  return new iRootProto;
}

void iRootProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    idiom_ = 0;
    count_pair_bool_ = 0u;
    src_count_ = 0u;
    dst_count_ = 0u;
  }
  event_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iRootProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idiom;
        break;
      }
      
      // required .idiom.IdiomType idiom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idiom:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (idiom::IdiomType_IsValid(value)) {
            set_idiom(static_cast< idiom::IdiomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }
      
      // repeated uint32 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_event_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_event_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        if (input->ExpectTag(32)) goto parse_count_pair_bool;
        break;
      }
      
      // required uint32 count_pair_bool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_pair_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_pair_bool_)));
          set_has_count_pair_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_count;
        break;
      }
      
      // required uint32 src_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_count_)));
          set_has_src_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_count;
        break;
      }
      
      // required uint32 dst_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_count_)));
          set_has_dst_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iRootProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .idiom.IdiomType idiom = 2;
  if (has_idiom()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->idiom(), output);
  }
  
  // repeated uint32 event_id = 3;
  for (int i = 0; i < this->event_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->event_id(i), output);
  }
  
  // required uint32 count_pair_bool = 4;
  if (has_count_pair_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count_pair_bool(), output);
  }
  
  // required uint32 src_count = 5;
  if (has_src_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->src_count(), output);
  }
  
  // required uint32 dst_count = 6;
  if (has_dst_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dst_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iRootProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .idiom.IdiomType idiom = 2;
  if (has_idiom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->idiom(), target);
  }
  
  // repeated uint32 event_id = 3;
  for (int i = 0; i < this->event_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->event_id(i), target);
  }
  
  // required uint32 count_pair_bool = 4;
  if (has_count_pair_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count_pair_bool(), target);
  }
  
  // required uint32 src_count = 5;
  if (has_src_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->src_count(), target);
  }
  
  // required uint32 dst_count = 6;
  if (has_dst_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dst_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iRootProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .idiom.IdiomType idiom = 2;
    if (has_idiom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->idiom());
    }
    
    // required uint32 count_pair_bool = 4;
    if (has_count_pair_bool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_pair_bool());
    }
    
    // required uint32 src_count = 5;
    if (has_src_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_count());
    }
    
    // required uint32 dst_count = 6;
    if (has_dst_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_count());
    }
    
  }
  // repeated uint32 event_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->event_id(i));
    }
    total_size += 1 * this->event_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iRootProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iRootProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iRootProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iRootProto::MergeFrom(const iRootProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_id_.MergeFrom(from.event_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_idiom()) {
      set_idiom(from.idiom());
    }
    if (from.has_count_pair_bool()) {
      set_count_pair_bool(from.count_pair_bool());
    }
    if (from.has_src_count()) {
      set_src_count(from.src_count());
    }
    if (from.has_dst_count()) {
      set_dst_count(from.dst_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iRootProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iRootProto::CopyFrom(const iRootProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iRootProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;
  
  return true;
}

void iRootProto::Swap(iRootProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(idiom_, other->idiom_);
    event_id_.Swap(&other->event_id_);
    std::swap(count_pair_bool_, other->count_pair_bool_);
    std::swap(src_count_, other->src_count_);
    std::swap(dst_count_, other->dst_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iRootProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iRootProto_descriptor_;
  metadata.reflection = iRootProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iRootDBProto::kEventFieldNumber;
const int iRootDBProto::kIrootFieldNumber;
#endif  // !_MSC_VER

iRootDBProto::iRootDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iRootDBProto::InitAsDefaultInstance() {
}

iRootDBProto::iRootDBProto(const iRootDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iRootDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iRootDBProto::~iRootDBProto() {
  SharedDtor();
}

void iRootDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iRootDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iRootDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iRootDBProto_descriptor_;
}

const iRootDBProto& iRootDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idiom_2firoot_2eproto();  return *default_instance_;
}

iRootDBProto* iRootDBProto::default_instance_ = NULL;

iRootDBProto* iRootDBProto::New() const {
  return new iRootDBProto;
}

void iRootDBProto::Clear() {
  event_.Clear();
  iroot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iRootDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .idiom.iRootEventProto event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectTag(18)) goto parse_iroot;
        break;
      }
      
      // repeated .idiom.iRootProto iroot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iroot;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iRootDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .idiom.iRootEventProto event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }
  
  // repeated .idiom.iRootProto iroot = 2;
  for (int i = 0; i < this->iroot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iroot(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iRootDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .idiom.iRootEventProto event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }
  
  // repeated .idiom.iRootProto iroot = 2;
  for (int i = 0; i < this->iroot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iroot(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iRootDBProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .idiom.iRootEventProto event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }
  
  // repeated .idiom.iRootProto iroot = 2;
  total_size += 1 * this->iroot_size();
  for (int i = 0; i < this->iroot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iroot(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iRootDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iRootDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iRootDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iRootDBProto::MergeFrom(const iRootDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  iroot_.MergeFrom(from.iroot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iRootDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iRootDBProto::CopyFrom(const iRootDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iRootDBProto::IsInitialized() const {
  
  for (int i = 0; i < event_size(); i++) {
    if (!this->event(i).IsInitialized()) return false;
  }
  for (int i = 0; i < iroot_size(); i++) {
    if (!this->iroot(i).IsInitialized()) return false;
  }
  return true;
}

void iRootDBProto::Swap(iRootDBProto* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    iroot_.Swap(&other->iroot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iRootDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iRootDBProto_descriptor_;
  metadata.reflection = iRootDBProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace idiom

// @@protoc_insertion_point(global_scope)
