// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idiom/iroot.proto

#ifndef PROTOBUF_idiom_2firoot_2eproto__INCLUDED
#define PROTOBUF_idiom_2firoot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace idiom {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_idiom_2firoot_2eproto();
void protobuf_AssignDesc_idiom_2firoot_2eproto();
void protobuf_ShutdownFile_idiom_2firoot_2eproto();

class iRootEventProto;
class iRootProto;
class iRootDBProto;

enum IdiomType {
  IDIOM_INVALID = 0,
  IDIOM_1 = 1,
  IDIOM_2 = 2,
  IDIOM_3 = 3,
  IDIOM_4 = 4,
  IDIOM_5 = 5
};
bool IdiomType_IsValid(int value);
const IdiomType IdiomType_MIN = IDIOM_INVALID;
const IdiomType IdiomType_MAX = IDIOM_5;
const int IdiomType_ARRAYSIZE = IdiomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IdiomType_descriptor();
inline const ::std::string& IdiomType_Name(IdiomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IdiomType_descriptor(), value);
}
inline bool IdiomType_Parse(
    const ::std::string& name, IdiomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IdiomType>(
    IdiomType_descriptor(), name, value);
}
enum iRootEventType {
  IROOT_EVENT_INVALID = 0,
  IROOT_EVENT_MEM_READ = 1,
  IROOT_EVENT_MEM_WRITE = 2,
  IROOT_EVENT_MUTEX_LOCK = 3,
  IROOT_EVENT_MUTEX_UNLOCK = 4
};
bool iRootEventType_IsValid(int value);
const iRootEventType iRootEventType_MIN = IROOT_EVENT_INVALID;
const iRootEventType iRootEventType_MAX = IROOT_EVENT_MUTEX_UNLOCK;
const int iRootEventType_ARRAYSIZE = iRootEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* iRootEventType_descriptor();
inline const ::std::string& iRootEventType_Name(iRootEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    iRootEventType_descriptor(), value);
}
inline bool iRootEventType_Parse(
    const ::std::string& name, iRootEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<iRootEventType>(
    iRootEventType_descriptor(), name, value);
}
// ===================================================================

class iRootEventProto : public ::google::protobuf::Message {
 public:
  iRootEventProto();
  virtual ~iRootEventProto();
  
  iRootEventProto(const iRootEventProto& from);
  
  inline iRootEventProto& operator=(const iRootEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const iRootEventProto& default_instance();
  
  void Swap(iRootEventProto* other);
  
  // implements Message ----------------------------------------------
  
  iRootEventProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const iRootEventProto& from);
  void MergeFrom(const iRootEventProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 inst_id = 2;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  inline ::google::protobuf::uint32 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint32 value);
  
  // required .idiom.iRootEventType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline idiom::iRootEventType type() const;
  inline void set_type(idiom::iRootEventType value);
  
  // @@protoc_insertion_point(class_scope:idiom.iRootEventProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 inst_id_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idiom_2firoot_2eproto();
  friend void protobuf_AssignDesc_idiom_2firoot_2eproto();
  friend void protobuf_ShutdownFile_idiom_2firoot_2eproto();
  
  void InitAsDefaultInstance();
  static iRootEventProto* default_instance_;
};
// -------------------------------------------------------------------

class iRootProto : public ::google::protobuf::Message {
 public:
  iRootProto();
  virtual ~iRootProto();
  
  iRootProto(const iRootProto& from);
  
  inline iRootProto& operator=(const iRootProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const iRootProto& default_instance();
  
  void Swap(iRootProto* other);
  
  // implements Message ----------------------------------------------
  
  iRootProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const iRootProto& from);
  void MergeFrom(const iRootProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .idiom.IdiomType idiom = 2;
  inline bool has_idiom() const;
  inline void clear_idiom();
  static const int kIdiomFieldNumber = 2;
  inline idiom::IdiomType idiom() const;
  inline void set_idiom(idiom::IdiomType value);
  
  // repeated uint32 event_id = 3;
  inline int event_id_size() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline ::google::protobuf::uint32 event_id(int index) const;
  inline void set_event_id(int index, ::google::protobuf::uint32 value);
  inline void add_event_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      event_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_event_id();
  
  // required uint32 count_pair_bool = 4;
  inline bool has_count_pair_bool() const;
  inline void clear_count_pair_bool();
  static const int kCountPairBoolFieldNumber = 4;
  inline ::google::protobuf::uint32 count_pair_bool() const;
  inline void set_count_pair_bool(::google::protobuf::uint32 value);
  
  // required uint32 src_count = 5;
  inline bool has_src_count() const;
  inline void clear_src_count();
  static const int kSrcCountFieldNumber = 5;
  inline ::google::protobuf::uint32 src_count() const;
  inline void set_src_count(::google::protobuf::uint32 value);
  
  // required uint32 dst_count = 6;
  inline bool has_dst_count() const;
  inline void clear_dst_count();
  static const int kDstCountFieldNumber = 6;
  inline ::google::protobuf::uint32 dst_count() const;
  inline void set_dst_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:idiom.iRootProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_idiom();
  inline void clear_has_idiom();
  inline void set_has_count_pair_bool();
  inline void clear_has_count_pair_bool();
  inline void set_has_src_count();
  inline void clear_has_src_count();
  inline void set_has_dst_count();
  inline void clear_has_dst_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  int idiom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > event_id_;
  ::google::protobuf::uint32 count_pair_bool_;
  ::google::protobuf::uint32 src_count_;
  ::google::protobuf::uint32 dst_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_idiom_2firoot_2eproto();
  friend void protobuf_AssignDesc_idiom_2firoot_2eproto();
  friend void protobuf_ShutdownFile_idiom_2firoot_2eproto();
  
  void InitAsDefaultInstance();
  static iRootProto* default_instance_;
};
// -------------------------------------------------------------------

class iRootDBProto : public ::google::protobuf::Message {
 public:
  iRootDBProto();
  virtual ~iRootDBProto();
  
  iRootDBProto(const iRootDBProto& from);
  
  inline iRootDBProto& operator=(const iRootDBProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const iRootDBProto& default_instance();
  
  void Swap(iRootDBProto* other);
  
  // implements Message ----------------------------------------------
  
  iRootDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const iRootDBProto& from);
  void MergeFrom(const iRootDBProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .idiom.iRootEventProto event = 1;
  inline int event_size() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::idiom::iRootEventProto& event(int index) const;
  inline ::idiom::iRootEventProto* mutable_event(int index);
  inline ::idiom::iRootEventProto* add_event();
  inline const ::google::protobuf::RepeatedPtrField< ::idiom::iRootEventProto >&
      event() const;
  inline ::google::protobuf::RepeatedPtrField< ::idiom::iRootEventProto >*
      mutable_event();
  
  // repeated .idiom.iRootProto iroot = 2;
  inline int iroot_size() const;
  inline void clear_iroot();
  static const int kIrootFieldNumber = 2;
  inline const ::idiom::iRootProto& iroot(int index) const;
  inline ::idiom::iRootProto* mutable_iroot(int index);
  inline ::idiom::iRootProto* add_iroot();
  inline const ::google::protobuf::RepeatedPtrField< ::idiom::iRootProto >&
      iroot() const;
  inline ::google::protobuf::RepeatedPtrField< ::idiom::iRootProto >*
      mutable_iroot();
  
  // @@protoc_insertion_point(class_scope:idiom.iRootDBProto)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::idiom::iRootEventProto > event_;
  ::google::protobuf::RepeatedPtrField< ::idiom::iRootProto > iroot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_idiom_2firoot_2eproto();
  friend void protobuf_AssignDesc_idiom_2firoot_2eproto();
  friend void protobuf_ShutdownFile_idiom_2firoot_2eproto();
  
  void InitAsDefaultInstance();
  static iRootDBProto* default_instance_;
};
// ===================================================================


// ===================================================================

// iRootEventProto

// required uint32 id = 1;
inline bool iRootEventProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iRootEventProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iRootEventProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iRootEventProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 iRootEventProto::id() const {
  return id_;
}
inline void iRootEventProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 inst_id = 2;
inline bool iRootEventProto::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iRootEventProto::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iRootEventProto::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iRootEventProto::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 iRootEventProto::inst_id() const {
  return inst_id_;
}
inline void iRootEventProto::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
}

// required .idiom.iRootEventType type = 3;
inline bool iRootEventProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void iRootEventProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void iRootEventProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void iRootEventProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline idiom::iRootEventType iRootEventProto::type() const {
  return static_cast< idiom::iRootEventType >(type_);
}
inline void iRootEventProto::set_type(idiom::iRootEventType value) {
  GOOGLE_DCHECK(idiom::iRootEventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// iRootProto

// required uint32 id = 1;
inline bool iRootProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iRootProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iRootProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iRootProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 iRootProto::id() const {
  return id_;
}
inline void iRootProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .idiom.IdiomType idiom = 2;
inline bool iRootProto::has_idiom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iRootProto::set_has_idiom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iRootProto::clear_has_idiom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iRootProto::clear_idiom() {
  idiom_ = 0;
  clear_has_idiom();
}
inline idiom::IdiomType iRootProto::idiom() const {
  return static_cast< idiom::IdiomType >(idiom_);
}
inline void iRootProto::set_idiom(idiom::IdiomType value) {
  GOOGLE_DCHECK(idiom::IdiomType_IsValid(value));
  set_has_idiom();
  idiom_ = value;
}

// repeated uint32 event_id = 3;
inline int iRootProto::event_id_size() const {
  return event_id_.size();
}
inline void iRootProto::clear_event_id() {
  event_id_.Clear();
}
inline ::google::protobuf::uint32 iRootProto::event_id(int index) const {
  return event_id_.Get(index);
}
inline void iRootProto::set_event_id(int index, ::google::protobuf::uint32 value) {
  event_id_.Set(index, value);
}
inline void iRootProto::add_event_id(::google::protobuf::uint32 value) {
  event_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
iRootProto::event_id() const {
  return event_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
iRootProto::mutable_event_id() {
  return &event_id_;
}

// required uint32 count_pair_bool = 4;
inline bool iRootProto::has_count_pair_bool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void iRootProto::set_has_count_pair_bool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void iRootProto::clear_has_count_pair_bool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void iRootProto::clear_count_pair_bool() {
  count_pair_bool_ = 0u;
  clear_has_count_pair_bool();
}
inline ::google::protobuf::uint32 iRootProto::count_pair_bool() const {
  return count_pair_bool_;
}
inline void iRootProto::set_count_pair_bool(::google::protobuf::uint32 value) {
  set_has_count_pair_bool();
  count_pair_bool_ = value;
}

// required uint32 src_count = 5;
inline bool iRootProto::has_src_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void iRootProto::set_has_src_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void iRootProto::clear_has_src_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void iRootProto::clear_src_count() {
  src_count_ = 0u;
  clear_has_src_count();
}
inline ::google::protobuf::uint32 iRootProto::src_count() const {
  return src_count_;
}
inline void iRootProto::set_src_count(::google::protobuf::uint32 value) {
  set_has_src_count();
  src_count_ = value;
}

// required uint32 dst_count = 6;
inline bool iRootProto::has_dst_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void iRootProto::set_has_dst_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void iRootProto::clear_has_dst_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void iRootProto::clear_dst_count() {
  dst_count_ = 0u;
  clear_has_dst_count();
}
inline ::google::protobuf::uint32 iRootProto::dst_count() const {
  return dst_count_;
}
inline void iRootProto::set_dst_count(::google::protobuf::uint32 value) {
  set_has_dst_count();
  dst_count_ = value;
}

// -------------------------------------------------------------------

// iRootDBProto

// repeated .idiom.iRootEventProto event = 1;
inline int iRootDBProto::event_size() const {
  return event_.size();
}
inline void iRootDBProto::clear_event() {
  event_.Clear();
}
inline const ::idiom::iRootEventProto& iRootDBProto::event(int index) const {
  return event_.Get(index);
}
inline ::idiom::iRootEventProto* iRootDBProto::mutable_event(int index) {
  return event_.Mutable(index);
}
inline ::idiom::iRootEventProto* iRootDBProto::add_event() {
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::idiom::iRootEventProto >&
iRootDBProto::event() const {
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::idiom::iRootEventProto >*
iRootDBProto::mutable_event() {
  return &event_;
}

// repeated .idiom.iRootProto iroot = 2;
inline int iRootDBProto::iroot_size() const {
  return iroot_.size();
}
inline void iRootDBProto::clear_iroot() {
  iroot_.Clear();
}
inline const ::idiom::iRootProto& iRootDBProto::iroot(int index) const {
  return iroot_.Get(index);
}
inline ::idiom::iRootProto* iRootDBProto::mutable_iroot(int index) {
  return iroot_.Mutable(index);
}
inline ::idiom::iRootProto* iRootDBProto::add_iroot() {
  return iroot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::idiom::iRootProto >&
iRootDBProto::iroot() const {
  return iroot_;
}
inline ::google::protobuf::RepeatedPtrField< ::idiom::iRootProto >*
iRootDBProto::mutable_iroot() {
  return &iroot_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace idiom

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< idiom::IdiomType>() {
  return idiom::IdiomType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< idiom::iRootEventType>() {
  return idiom::iRootEventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_idiom_2firoot_2eproto__INCLUDED
