// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "idiom/memo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace idiom {

namespace {

const ::google::protobuf::Descriptor* iRootInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iRootInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_idiom_2fmemo_2eproto() {
  protobuf_AddDesc_idiom_2fmemo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "idiom/memo.proto");
  GOOGLE_CHECK(file != NULL);
  iRootInfoProto_descriptor_ = file->message_type(0);
  static const int iRootInfoProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootInfoProto, iroot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootInfoProto, total_test_runs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootInfoProto, async_),
  };
  iRootInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iRootInfoProto_descriptor_,
      iRootInfoProto::default_instance_,
      iRootInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iRootInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iRootInfoProto));
  CandidateProto_descriptor_ = file->message_type(1);
  static const int CandidateProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateProto, iroot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateProto, test_runs_),
  };
  CandidateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CandidateProto_descriptor_,
      CandidateProto::default_instance_,
      CandidateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CandidateProto));
  MemoProto_descriptor_ = file->message_type(2);
  static const int MemoProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, iroot_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, exposed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, predicted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, shadow_exposed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, candidate_),
  };
  MemoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoProto_descriptor_,
      MemoProto::default_instance_,
      MemoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_idiom_2fmemo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iRootInfoProto_descriptor_, &iRootInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CandidateProto_descriptor_, &CandidateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoProto_descriptor_, &MemoProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_idiom_2fmemo_2eproto() {
  delete iRootInfoProto::default_instance_;
  delete iRootInfoProto_reflection_;
  delete CandidateProto::default_instance_;
  delete CandidateProto_reflection_;
  delete MemoProto::default_instance_;
  delete MemoProto_reflection_;
}

void protobuf_AddDesc_idiom_2fmemo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020idiom/memo.proto\022\005idiom\"J\n\016iRootInfoPr"
    "oto\022\020\n\010iroot_id\030\001 \002(\r\022\027\n\017total_test_runs"
    "\030\002 \002(\r\022\r\n\005async\030\003 \001(\010\"5\n\016CandidateProto\022"
    "\020\n\010iroot_id\030\001 \002(\r\022\021\n\ttest_runs\030\002 \002(\r\"\254\001\n"
    "\tMemoProto\022)\n\niroot_info\030\001 \003(\0132\025.idiom.i"
    "RootInfoProto\022\017\n\007exposed\030\002 \003(\r\022\016\n\006failed"
    "\030\003 \003(\r\022\021\n\tpredicted\030\004 \003(\r\022\026\n\016shadow_expo"
    "sed\030\005 \003(\r\022(\n\tcandidate\030\006 \003(\0132\025.idiom.Can"
    "didateProto", 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idiom/memo.proto", &protobuf_RegisterTypes);
  iRootInfoProto::default_instance_ = new iRootInfoProto();
  CandidateProto::default_instance_ = new CandidateProto();
  MemoProto::default_instance_ = new MemoProto();
  iRootInfoProto::default_instance_->InitAsDefaultInstance();
  CandidateProto::default_instance_->InitAsDefaultInstance();
  MemoProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_idiom_2fmemo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_idiom_2fmemo_2eproto {
  StaticDescriptorInitializer_idiom_2fmemo_2eproto() {
    protobuf_AddDesc_idiom_2fmemo_2eproto();
  }
} static_descriptor_initializer_idiom_2fmemo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int iRootInfoProto::kIrootIdFieldNumber;
const int iRootInfoProto::kTotalTestRunsFieldNumber;
const int iRootInfoProto::kAsyncFieldNumber;
#endif  // !_MSC_VER

iRootInfoProto::iRootInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iRootInfoProto::InitAsDefaultInstance() {
}

iRootInfoProto::iRootInfoProto(const iRootInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iRootInfoProto::SharedCtor() {
  _cached_size_ = 0;
  iroot_id_ = 0u;
  total_test_runs_ = 0u;
  async_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iRootInfoProto::~iRootInfoProto() {
  SharedDtor();
}

void iRootInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iRootInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iRootInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iRootInfoProto_descriptor_;
}

const iRootInfoProto& iRootInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idiom_2fmemo_2eproto();  return *default_instance_;
}

iRootInfoProto* iRootInfoProto::default_instance_ = NULL;

iRootInfoProto* iRootInfoProto::New() const {
  return new iRootInfoProto;
}

void iRootInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iroot_id_ = 0u;
    total_test_runs_ = 0u;
    async_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iRootInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iroot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iroot_id_)));
          set_has_iroot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_test_runs;
        break;
      }
      
      // required uint32 total_test_runs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_test_runs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_test_runs_)));
          set_has_total_test_runs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_async;
        break;
      }
      
      // optional bool async = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_async:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_)));
          set_has_async();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iRootInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iroot_id(), output);
  }
  
  // required uint32 total_test_runs = 2;
  if (has_total_test_runs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_test_runs(), output);
  }
  
  // optional bool async = 3;
  if (has_async()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->async(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iRootInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iroot_id(), target);
  }
  
  // required uint32 total_test_runs = 2;
  if (has_total_test_runs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_test_runs(), target);
  }
  
  // optional bool async = 3;
  if (has_async()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->async(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iRootInfoProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 iroot_id = 1;
    if (has_iroot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iroot_id());
    }
    
    // required uint32 total_test_runs = 2;
    if (has_total_test_runs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_test_runs());
    }
    
    // optional bool async = 3;
    if (has_async()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iRootInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iRootInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iRootInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iRootInfoProto::MergeFrom(const iRootInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iroot_id()) {
      set_iroot_id(from.iroot_id());
    }
    if (from.has_total_test_runs()) {
      set_total_test_runs(from.total_test_runs());
    }
    if (from.has_async()) {
      set_async(from.async());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iRootInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iRootInfoProto::CopyFrom(const iRootInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iRootInfoProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void iRootInfoProto::Swap(iRootInfoProto* other) {
  if (other != this) {
    std::swap(iroot_id_, other->iroot_id_);
    std::swap(total_test_runs_, other->total_test_runs_);
    std::swap(async_, other->async_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iRootInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iRootInfoProto_descriptor_;
  metadata.reflection = iRootInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CandidateProto::kIrootIdFieldNumber;
const int CandidateProto::kTestRunsFieldNumber;
#endif  // !_MSC_VER

CandidateProto::CandidateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CandidateProto::InitAsDefaultInstance() {
}

CandidateProto::CandidateProto(const CandidateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CandidateProto::SharedCtor() {
  _cached_size_ = 0;
  iroot_id_ = 0u;
  test_runs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandidateProto::~CandidateProto() {
  SharedDtor();
}

void CandidateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CandidateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateProto_descriptor_;
}

const CandidateProto& CandidateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idiom_2fmemo_2eproto();  return *default_instance_;
}

CandidateProto* CandidateProto::default_instance_ = NULL;

CandidateProto* CandidateProto::New() const {
  return new CandidateProto;
}

void CandidateProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iroot_id_ = 0u;
    test_runs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CandidateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iroot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iroot_id_)));
          set_has_iroot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test_runs;
        break;
      }
      
      // required uint32 test_runs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_runs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_runs_)));
          set_has_test_runs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CandidateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iroot_id(), output);
  }
  
  // required uint32 test_runs = 2;
  if (has_test_runs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->test_runs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CandidateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iroot_id(), target);
  }
  
  // required uint32 test_runs = 2;
  if (has_test_runs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->test_runs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CandidateProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 iroot_id = 1;
    if (has_iroot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iroot_id());
    }
    
    // required uint32 test_runs = 2;
    if (has_test_runs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_runs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CandidateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CandidateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandidateProto::MergeFrom(const CandidateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iroot_id()) {
      set_iroot_id(from.iroot_id());
    }
    if (from.has_test_runs()) {
      set_test_runs(from.test_runs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CandidateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateProto::CopyFrom(const CandidateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CandidateProto::Swap(CandidateProto* other) {
  if (other != this) {
    std::swap(iroot_id_, other->iroot_id_);
    std::swap(test_runs_, other->test_runs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CandidateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateProto_descriptor_;
  metadata.reflection = CandidateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoProto::kIrootInfoFieldNumber;
const int MemoProto::kExposedFieldNumber;
const int MemoProto::kFailedFieldNumber;
const int MemoProto::kPredictedFieldNumber;
const int MemoProto::kShadowExposedFieldNumber;
const int MemoProto::kCandidateFieldNumber;
#endif  // !_MSC_VER

MemoProto::MemoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemoProto::InitAsDefaultInstance() {
}

MemoProto::MemoProto(const MemoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemoProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoProto::~MemoProto() {
  SharedDtor();
}

void MemoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoProto_descriptor_;
}

const MemoProto& MemoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idiom_2fmemo_2eproto();  return *default_instance_;
}

MemoProto* MemoProto::default_instance_ = NULL;

MemoProto* MemoProto::New() const {
  return new MemoProto;
}

void MemoProto::Clear() {
  iroot_info_.Clear();
  exposed_.Clear();
  failed_.Clear();
  predicted_.Clear();
  shadow_exposed_.Clear();
  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .idiom.iRootInfoProto iroot_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iroot_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iroot_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_iroot_info;
        if (input->ExpectTag(16)) goto parse_exposed;
        break;
      }
      
      // repeated uint32 exposed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exposed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_exposed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exposed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exposed;
        if (input->ExpectTag(24)) goto parse_failed;
        break;
      }
      
      // repeated uint32 failed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_failed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_failed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_failed;
        if (input->ExpectTag(32)) goto parse_predicted;
        break;
      }
      
      // repeated uint32 predicted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_predicted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_predicted())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_predicted())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_predicted;
        if (input->ExpectTag(40)) goto parse_shadow_exposed;
        break;
      }
      
      // repeated uint32 shadow_exposed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_exposed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_shadow_exposed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shadow_exposed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shadow_exposed;
        if (input->ExpectTag(50)) goto parse_candidate;
        break;
      }
      
      // repeated .idiom.CandidateProto candidate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_candidate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_candidate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .idiom.iRootInfoProto iroot_info = 1;
  for (int i = 0; i < this->iroot_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iroot_info(i), output);
  }
  
  // repeated uint32 exposed = 2;
  for (int i = 0; i < this->exposed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->exposed(i), output);
  }
  
  // repeated uint32 failed = 3;
  for (int i = 0; i < this->failed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->failed(i), output);
  }
  
  // repeated uint32 predicted = 4;
  for (int i = 0; i < this->predicted_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->predicted(i), output);
  }
  
  // repeated uint32 shadow_exposed = 5;
  for (int i = 0; i < this->shadow_exposed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->shadow_exposed(i), output);
  }
  
  // repeated .idiom.CandidateProto candidate = 6;
  for (int i = 0; i < this->candidate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->candidate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .idiom.iRootInfoProto iroot_info = 1;
  for (int i = 0; i < this->iroot_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iroot_info(i), target);
  }
  
  // repeated uint32 exposed = 2;
  for (int i = 0; i < this->exposed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->exposed(i), target);
  }
  
  // repeated uint32 failed = 3;
  for (int i = 0; i < this->failed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->failed(i), target);
  }
  
  // repeated uint32 predicted = 4;
  for (int i = 0; i < this->predicted_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->predicted(i), target);
  }
  
  // repeated uint32 shadow_exposed = 5;
  for (int i = 0; i < this->shadow_exposed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->shadow_exposed(i), target);
  }
  
  // repeated .idiom.CandidateProto candidate = 6;
  for (int i = 0; i < this->candidate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->candidate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemoProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .idiom.iRootInfoProto iroot_info = 1;
  total_size += 1 * this->iroot_info_size();
  for (int i = 0; i < this->iroot_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iroot_info(i));
  }
  
  // repeated uint32 exposed = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exposed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exposed(i));
    }
    total_size += 1 * this->exposed_size() + data_size;
  }
  
  // repeated uint32 failed = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->failed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->failed(i));
    }
    total_size += 1 * this->failed_size() + data_size;
  }
  
  // repeated uint32 predicted = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->predicted_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->predicted(i));
    }
    total_size += 1 * this->predicted_size() + data_size;
  }
  
  // repeated uint32 shadow_exposed = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shadow_exposed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shadow_exposed(i));
    }
    total_size += 1 * this->shadow_exposed_size() + data_size;
  }
  
  // repeated .idiom.CandidateProto candidate = 6;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoProto::MergeFrom(const MemoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  iroot_info_.MergeFrom(from.iroot_info_);
  exposed_.MergeFrom(from.exposed_);
  failed_.MergeFrom(from.failed_);
  predicted_.MergeFrom(from.predicted_);
  shadow_exposed_.MergeFrom(from.shadow_exposed_);
  candidate_.MergeFrom(from.candidate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoProto::CopyFrom(const MemoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoProto::IsInitialized() const {
  
  for (int i = 0; i < iroot_info_size(); i++) {
    if (!this->iroot_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < candidate_size(); i++) {
    if (!this->candidate(i).IsInitialized()) return false;
  }
  return true;
}

void MemoProto::Swap(MemoProto* other) {
  if (other != this) {
    iroot_info_.Swap(&other->iroot_info_);
    exposed_.Swap(&other->exposed_);
    failed_.Swap(&other->failed_);
    predicted_.Swap(&other->predicted_);
    shadow_exposed_.Swap(&other->shadow_exposed_);
    candidate_.Swap(&other->candidate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoProto_descriptor_;
  metadata.reflection = MemoProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace idiom

// @@protoc_insertion_point(global_scope)
