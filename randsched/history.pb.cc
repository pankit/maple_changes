// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "randsched/history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace randsched {

namespace {

const ::google::protobuf::Descriptor* HistoryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryTableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryTableProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_randsched_2fhistory_2eproto() {
  protobuf_AddDesc_randsched_2fhistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "randsched/history.proto");
  GOOGLE_CHECK(file != NULL);
  HistoryProto_descriptor_ = file->message_type(0);
  static const int HistoryProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, inst_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, num_threads_),
  };
  HistoryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryProto_descriptor_,
      HistoryProto::default_instance_,
      HistoryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryProto));
  HistoryTableProto_descriptor_ = file->message_type(1);
  static const int HistoryTableProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTableProto, history_),
  };
  HistoryTableProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryTableProto_descriptor_,
      HistoryTableProto::default_instance_,
      HistoryTableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTableProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTableProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryTableProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_randsched_2fhistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryProto_descriptor_, &HistoryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryTableProto_descriptor_, &HistoryTableProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_randsched_2fhistory_2eproto() {
  delete HistoryProto::default_instance_;
  delete HistoryProto_reflection_;
  delete HistoryTableProto::default_instance_;
  delete HistoryTableProto_reflection_;
}

void protobuf_AddDesc_randsched_2fhistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027randsched/history.proto\022\trandsched\"7\n\014"
    "HistoryProto\022\022\n\ninst_count\030\001 \002(\004\022\023\n\013num_"
    "threads\030\002 \002(\004\"=\n\021HistoryTableProto\022(\n\007hi"
    "story\030\001 \003(\0132\027.randsched.HistoryProto", 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "randsched/history.proto", &protobuf_RegisterTypes);
  HistoryProto::default_instance_ = new HistoryProto();
  HistoryTableProto::default_instance_ = new HistoryTableProto();
  HistoryProto::default_instance_->InitAsDefaultInstance();
  HistoryTableProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_randsched_2fhistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_randsched_2fhistory_2eproto {
  StaticDescriptorInitializer_randsched_2fhistory_2eproto() {
    protobuf_AddDesc_randsched_2fhistory_2eproto();
  }
} static_descriptor_initializer_randsched_2fhistory_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HistoryProto::kInstCountFieldNumber;
const int HistoryProto::kNumThreadsFieldNumber;
#endif  // !_MSC_VER

HistoryProto::HistoryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryProto::InitAsDefaultInstance() {
}

HistoryProto::HistoryProto(const HistoryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryProto::SharedCtor() {
  _cached_size_ = 0;
  inst_count_ = GOOGLE_ULONGLONG(0);
  num_threads_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryProto::~HistoryProto() {
  SharedDtor();
}

void HistoryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryProto_descriptor_;
}

const HistoryProto& HistoryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_randsched_2fhistory_2eproto();  return *default_instance_;
}

HistoryProto* HistoryProto::default_instance_ = NULL;

HistoryProto* HistoryProto::New() const {
  return new HistoryProto;
}

void HistoryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inst_count_ = GOOGLE_ULONGLONG(0);
    num_threads_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 inst_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inst_count_)));
          set_has_inst_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_threads;
        break;
      }
      
      // required uint64 num_threads = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 inst_count = 1;
  if (has_inst_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inst_count(), output);
  }
  
  // required uint64 num_threads = 2;
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_threads(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 inst_count = 1;
  if (has_inst_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inst_count(), target);
  }
  
  // required uint64 num_threads = 2;
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_threads(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 inst_count = 1;
    if (has_inst_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inst_count());
    }
    
    // required uint64 num_threads = 2;
    if (has_num_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_threads());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryProto::MergeFrom(const HistoryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inst_count()) {
      set_inst_count(from.inst_count());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryProto::CopyFrom(const HistoryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HistoryProto::Swap(HistoryProto* other) {
  if (other != this) {
    std::swap(inst_count_, other->inst_count_);
    std::swap(num_threads_, other->num_threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryProto_descriptor_;
  metadata.reflection = HistoryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryTableProto::kHistoryFieldNumber;
#endif  // !_MSC_VER

HistoryTableProto::HistoryTableProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryTableProto::InitAsDefaultInstance() {
}

HistoryTableProto::HistoryTableProto(const HistoryTableProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryTableProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryTableProto::~HistoryTableProto() {
  SharedDtor();
}

void HistoryTableProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryTableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryTableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryTableProto_descriptor_;
}

const HistoryTableProto& HistoryTableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_randsched_2fhistory_2eproto();  return *default_instance_;
}

HistoryTableProto* HistoryTableProto::default_instance_ = NULL;

HistoryTableProto* HistoryTableProto::New() const {
  return new HistoryTableProto;
}

void HistoryTableProto::Clear() {
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryTableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .randsched.HistoryProto history = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryTableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .randsched.HistoryProto history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryTableProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .randsched.HistoryProto history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryTableProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .randsched.HistoryProto history = 1;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryTableProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryTableProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryTableProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryTableProto::MergeFrom(const HistoryTableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryTableProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryTableProto::CopyFrom(const HistoryTableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryTableProto::IsInitialized() const {
  
  for (int i = 0; i < history_size(); i++) {
    if (!this->history(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryTableProto::Swap(HistoryTableProto* other) {
  if (other != this) {
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryTableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryTableProto_descriptor_;
  metadata.reflection = HistoryTableProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace randsched

// @@protoc_insertion_point(global_scope)
