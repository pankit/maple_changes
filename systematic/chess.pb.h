// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: systematic/chess.proto

#ifndef PROTOBUF_systematic_2fchess_2eproto__INCLUDED
#define PROTOBUF_systematic_2fchess_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "systematic/program.pb.h"
// @@protoc_insertion_point(includes)

namespace systematic {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_systematic_2fchess_2eproto();
void protobuf_AssignDesc_systematic_2fchess_2eproto();
void protobuf_ShutdownFile_systematic_2fchess_2eproto();

class ChessPorProto;
class ChessPorProto_VisitedStateProto;

// ===================================================================

class ChessPorProto_VisitedStateProto : public ::google::protobuf::Message {
 public:
  ChessPorProto_VisitedStateProto();
  virtual ~ChessPorProto_VisitedStateProto();
  
  ChessPorProto_VisitedStateProto(const ChessPorProto_VisitedStateProto& from);
  
  inline ChessPorProto_VisitedStateProto& operator=(const ChessPorProto_VisitedStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPorProto_VisitedStateProto& default_instance();
  
  void Swap(ChessPorProto_VisitedStateProto* other);
  
  // implements Message ----------------------------------------------
  
  ChessPorProto_VisitedStateProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessPorProto_VisitedStateProto& from);
  void MergeFrom(const ChessPorProto_VisitedStateProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hash_val = 1;
  inline bool has_hash_val() const;
  inline void clear_hash_val();
  static const int kHashValFieldNumber = 1;
  inline ::google::protobuf::uint32 hash_val() const;
  inline void set_hash_val(::google::protobuf::uint32 value);
  
  // required uint32 preemptions = 2;
  inline bool has_preemptions() const;
  inline void clear_preemptions();
  static const int kPreemptionsFieldNumber = 2;
  inline ::google::protobuf::uint32 preemptions() const;
  inline void set_preemptions(::google::protobuf::uint32 value);
  
  // required uint32 exec_id = 3;
  inline bool has_exec_id() const;
  inline void clear_exec_id();
  static const int kExecIdFieldNumber = 3;
  inline ::google::protobuf::uint32 exec_id() const;
  inline void set_exec_id(::google::protobuf::uint32 value);
  
  // required uint32 state_idx = 4;
  inline bool has_state_idx() const;
  inline void clear_state_idx();
  static const int kStateIdxFieldNumber = 4;
  inline ::google::protobuf::uint32 state_idx() const;
  inline void set_state_idx(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:systematic.ChessPorProto.VisitedStateProto)
 private:
  inline void set_has_hash_val();
  inline void clear_has_hash_val();
  inline void set_has_preemptions();
  inline void clear_has_preemptions();
  inline void set_has_exec_id();
  inline void clear_has_exec_id();
  inline void set_has_state_idx();
  inline void clear_has_state_idx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hash_val_;
  ::google::protobuf::uint32 preemptions_;
  ::google::protobuf::uint32 exec_id_;
  ::google::protobuf::uint32 state_idx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_systematic_2fchess_2eproto();
  friend void protobuf_AssignDesc_systematic_2fchess_2eproto();
  friend void protobuf_ShutdownFile_systematic_2fchess_2eproto();
  
  void InitAsDefaultInstance();
  static ChessPorProto_VisitedStateProto* default_instance_;
};
// -------------------------------------------------------------------

class ChessPorProto : public ::google::protobuf::Message {
 public:
  ChessPorProto();
  virtual ~ChessPorProto();
  
  ChessPorProto(const ChessPorProto& from);
  
  inline ChessPorProto& operator=(const ChessPorProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPorProto& default_instance();
  
  void Swap(ChessPorProto* other);
  
  // implements Message ----------------------------------------------
  
  ChessPorProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessPorProto& from);
  void MergeFrom(const ChessPorProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ChessPorProto_VisitedStateProto VisitedStateProto;
  
  // accessors -------------------------------------------------------
  
  // required uint32 num_execs = 1;
  inline bool has_num_execs() const;
  inline void clear_num_execs();
  static const int kNumExecsFieldNumber = 1;
  inline ::google::protobuf::uint32 num_execs() const;
  inline void set_num_execs(::google::protobuf::uint32 value);
  
  // repeated .systematic.ChessPorProto.VisitedStateProto visited_state = 2;
  inline int visited_state_size() const;
  inline void clear_visited_state();
  static const int kVisitedStateFieldNumber = 2;
  inline const ::systematic::ChessPorProto_VisitedStateProto& visited_state(int index) const;
  inline ::systematic::ChessPorProto_VisitedStateProto* mutable_visited_state(int index);
  inline ::systematic::ChessPorProto_VisitedStateProto* add_visited_state();
  inline const ::google::protobuf::RepeatedPtrField< ::systematic::ChessPorProto_VisitedStateProto >&
      visited_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::systematic::ChessPorProto_VisitedStateProto >*
      mutable_visited_state();
  
  // @@protoc_insertion_point(class_scope:systematic.ChessPorProto)
 private:
  inline void set_has_num_execs();
  inline void clear_has_num_execs();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::systematic::ChessPorProto_VisitedStateProto > visited_state_;
  ::google::protobuf::uint32 num_execs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_systematic_2fchess_2eproto();
  friend void protobuf_AssignDesc_systematic_2fchess_2eproto();
  friend void protobuf_ShutdownFile_systematic_2fchess_2eproto();
  
  void InitAsDefaultInstance();
  static ChessPorProto* default_instance_;
};
// ===================================================================


// ===================================================================

// ChessPorProto_VisitedStateProto

// required uint32 hash_val = 1;
inline bool ChessPorProto_VisitedStateProto::has_hash_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChessPorProto_VisitedStateProto::set_has_hash_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChessPorProto_VisitedStateProto::clear_has_hash_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChessPorProto_VisitedStateProto::clear_hash_val() {
  hash_val_ = 0u;
  clear_has_hash_val();
}
inline ::google::protobuf::uint32 ChessPorProto_VisitedStateProto::hash_val() const {
  return hash_val_;
}
inline void ChessPorProto_VisitedStateProto::set_hash_val(::google::protobuf::uint32 value) {
  set_has_hash_val();
  hash_val_ = value;
}

// required uint32 preemptions = 2;
inline bool ChessPorProto_VisitedStateProto::has_preemptions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChessPorProto_VisitedStateProto::set_has_preemptions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChessPorProto_VisitedStateProto::clear_has_preemptions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChessPorProto_VisitedStateProto::clear_preemptions() {
  preemptions_ = 0u;
  clear_has_preemptions();
}
inline ::google::protobuf::uint32 ChessPorProto_VisitedStateProto::preemptions() const {
  return preemptions_;
}
inline void ChessPorProto_VisitedStateProto::set_preemptions(::google::protobuf::uint32 value) {
  set_has_preemptions();
  preemptions_ = value;
}

// required uint32 exec_id = 3;
inline bool ChessPorProto_VisitedStateProto::has_exec_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChessPorProto_VisitedStateProto::set_has_exec_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChessPorProto_VisitedStateProto::clear_has_exec_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChessPorProto_VisitedStateProto::clear_exec_id() {
  exec_id_ = 0u;
  clear_has_exec_id();
}
inline ::google::protobuf::uint32 ChessPorProto_VisitedStateProto::exec_id() const {
  return exec_id_;
}
inline void ChessPorProto_VisitedStateProto::set_exec_id(::google::protobuf::uint32 value) {
  set_has_exec_id();
  exec_id_ = value;
}

// required uint32 state_idx = 4;
inline bool ChessPorProto_VisitedStateProto::has_state_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChessPorProto_VisitedStateProto::set_has_state_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChessPorProto_VisitedStateProto::clear_has_state_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChessPorProto_VisitedStateProto::clear_state_idx() {
  state_idx_ = 0u;
  clear_has_state_idx();
}
inline ::google::protobuf::uint32 ChessPorProto_VisitedStateProto::state_idx() const {
  return state_idx_;
}
inline void ChessPorProto_VisitedStateProto::set_state_idx(::google::protobuf::uint32 value) {
  set_has_state_idx();
  state_idx_ = value;
}

// -------------------------------------------------------------------

// ChessPorProto

// required uint32 num_execs = 1;
inline bool ChessPorProto::has_num_execs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChessPorProto::set_has_num_execs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChessPorProto::clear_has_num_execs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChessPorProto::clear_num_execs() {
  num_execs_ = 0u;
  clear_has_num_execs();
}
inline ::google::protobuf::uint32 ChessPorProto::num_execs() const {
  return num_execs_;
}
inline void ChessPorProto::set_num_execs(::google::protobuf::uint32 value) {
  set_has_num_execs();
  num_execs_ = value;
}

// repeated .systematic.ChessPorProto.VisitedStateProto visited_state = 2;
inline int ChessPorProto::visited_state_size() const {
  return visited_state_.size();
}
inline void ChessPorProto::clear_visited_state() {
  visited_state_.Clear();
}
inline const ::systematic::ChessPorProto_VisitedStateProto& ChessPorProto::visited_state(int index) const {
  return visited_state_.Get(index);
}
inline ::systematic::ChessPorProto_VisitedStateProto* ChessPorProto::mutable_visited_state(int index) {
  return visited_state_.Mutable(index);
}
inline ::systematic::ChessPorProto_VisitedStateProto* ChessPorProto::add_visited_state() {
  return visited_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::systematic::ChessPorProto_VisitedStateProto >&
ChessPorProto::visited_state() const {
  return visited_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::systematic::ChessPorProto_VisitedStateProto >*
ChessPorProto::mutable_visited_state() {
  return &visited_state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace systematic

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_systematic_2fchess_2eproto__INCLUDED
