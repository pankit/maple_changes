// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "systematic/search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace systematic {

namespace {

const ::google::protobuf::Descriptor* ActionInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchNodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchNodeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchInfoProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_systematic_2fsearch_2eproto() {
  protobuf_AddDesc_systematic_2fsearch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "systematic/search.proto");
  GOOGLE_CHECK(file != NULL);
  ActionInfoProto_descriptor_ = file->message_type(0);
  static const int ActionInfoProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionInfoProto, thd_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionInfoProto, obj_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionInfoProto, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionInfoProto, inst_id_),
  };
  ActionInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionInfoProto_descriptor_,
      ActionInfoProto::default_instance_,
      ActionInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionInfoProto));
  SearchNodeProto_descriptor_ = file->message_type(1);
  static const int SearchNodeProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchNodeProto, sel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchNodeProto, backtrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchNodeProto, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchNodeProto, enabled_),
  };
  SearchNodeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchNodeProto_descriptor_,
      SearchNodeProto::default_instance_,
      SearchNodeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchNodeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchNodeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchNodeProto));
  SearchInfoProto_descriptor_ = file->message_type(2);
  static const int SearchInfoProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchInfoProto, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchInfoProto, num_runs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchInfoProto, node_),
  };
  SearchInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchInfoProto_descriptor_,
      SearchInfoProto::default_instance_,
      SearchInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchInfoProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_systematic_2fsearch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionInfoProto_descriptor_, &ActionInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchNodeProto_descriptor_, &SearchNodeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchInfoProto_descriptor_, &SearchInfoProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_systematic_2fsearch_2eproto() {
  delete ActionInfoProto::default_instance_;
  delete ActionInfoProto_reflection_;
  delete SearchNodeProto::default_instance_;
  delete SearchNodeProto_reflection_;
  delete SearchInfoProto::default_instance_;
  delete SearchInfoProto_reflection_;
}

void protobuf_AddDesc_systematic_2fsearch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::systematic::protobuf_AddDesc_systematic_2fprogram_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027systematic/search.proto\022\nsystematic\032\030s"
    "ystematic/program.proto\"g\n\017ActionInfoPro"
    "to\022\017\n\007thd_uid\030\001 \002(\r\022\017\n\007obj_uid\030\002 \001(\r\022!\n\002"
    "op\030\003 \002(\0162\025.systematic.Operation\022\017\n\007inst_"
    "id\030\004 \001(\r\"m\n\017SearchNodeProto\022\013\n\003sel\030\001 \002(\r"
    "\022\021\n\tbacktrack\030\002 \003(\r\022\014\n\004done\030\003 \003(\r\022,\n\007ena"
    "bled\030\004 \003(\0132\033.systematic.ActionInfoProto\""
    "\\\n\017SearchInfoProto\022\014\n\004done\030\001 \002(\010\022\020\n\010num_"
    "runs\030\002 \002(\r\022)\n\004node\030\003 \003(\0132\033.systematic.Se"
    "archNodeProto", 373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "systematic/search.proto", &protobuf_RegisterTypes);
  ActionInfoProto::default_instance_ = new ActionInfoProto();
  SearchNodeProto::default_instance_ = new SearchNodeProto();
  SearchInfoProto::default_instance_ = new SearchInfoProto();
  ActionInfoProto::default_instance_->InitAsDefaultInstance();
  SearchNodeProto::default_instance_->InitAsDefaultInstance();
  SearchInfoProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_systematic_2fsearch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_systematic_2fsearch_2eproto {
  StaticDescriptorInitializer_systematic_2fsearch_2eproto() {
    protobuf_AddDesc_systematic_2fsearch_2eproto();
  }
} static_descriptor_initializer_systematic_2fsearch_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ActionInfoProto::kThdUidFieldNumber;
const int ActionInfoProto::kObjUidFieldNumber;
const int ActionInfoProto::kOpFieldNumber;
const int ActionInfoProto::kInstIdFieldNumber;
#endif  // !_MSC_VER

ActionInfoProto::ActionInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionInfoProto::InitAsDefaultInstance() {
}

ActionInfoProto::ActionInfoProto(const ActionInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionInfoProto::SharedCtor() {
  _cached_size_ = 0;
  thd_uid_ = 0u;
  obj_uid_ = 0u;
  op_ = 0;
  inst_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionInfoProto::~ActionInfoProto() {
  SharedDtor();
}

void ActionInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionInfoProto_descriptor_;
}

const ActionInfoProto& ActionInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systematic_2fsearch_2eproto();  return *default_instance_;
}

ActionInfoProto* ActionInfoProto::default_instance_ = NULL;

ActionInfoProto* ActionInfoProto::New() const {
  return new ActionInfoProto;
}

void ActionInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    thd_uid_ = 0u;
    obj_uid_ = 0u;
    op_ = 0;
    inst_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 thd_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thd_uid_)));
          set_has_thd_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obj_uid;
        break;
      }
      
      // optional uint32 obj_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_uid_)));
          set_has_obj_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }
      
      // required .systematic.Operation op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (systematic::Operation_IsValid(value)) {
            set_op(static_cast< systematic::Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inst_id;
        break;
      }
      
      // optional uint32 inst_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 thd_uid = 1;
  if (has_thd_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thd_uid(), output);
  }
  
  // optional uint32 obj_uid = 2;
  if (has_obj_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->obj_uid(), output);
  }
  
  // required .systematic.Operation op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }
  
  // optional uint32 inst_id = 4;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inst_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 thd_uid = 1;
  if (has_thd_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thd_uid(), target);
  }
  
  // optional uint32 obj_uid = 2;
  if (has_obj_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->obj_uid(), target);
  }
  
  // required .systematic.Operation op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }
  
  // optional uint32 inst_id = 4;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inst_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionInfoProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 thd_uid = 1;
    if (has_thd_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thd_uid());
    }
    
    // optional uint32 obj_uid = 2;
    if (has_obj_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_uid());
    }
    
    // required .systematic.Operation op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }
    
    // optional uint32 inst_id = 4;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionInfoProto::MergeFrom(const ActionInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thd_uid()) {
      set_thd_uid(from.thd_uid());
    }
    if (from.has_obj_uid()) {
      set_obj_uid(from.obj_uid());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionInfoProto::CopyFrom(const ActionInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionInfoProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void ActionInfoProto::Swap(ActionInfoProto* other) {
  if (other != this) {
    std::swap(thd_uid_, other->thd_uid_);
    std::swap(obj_uid_, other->obj_uid_);
    std::swap(op_, other->op_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionInfoProto_descriptor_;
  metadata.reflection = ActionInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchNodeProto::kSelFieldNumber;
const int SearchNodeProto::kBacktrackFieldNumber;
const int SearchNodeProto::kDoneFieldNumber;
const int SearchNodeProto::kEnabledFieldNumber;
#endif  // !_MSC_VER

SearchNodeProto::SearchNodeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchNodeProto::InitAsDefaultInstance() {
}

SearchNodeProto::SearchNodeProto(const SearchNodeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchNodeProto::SharedCtor() {
  _cached_size_ = 0;
  sel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchNodeProto::~SearchNodeProto() {
  SharedDtor();
}

void SearchNodeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchNodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchNodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchNodeProto_descriptor_;
}

const SearchNodeProto& SearchNodeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systematic_2fsearch_2eproto();  return *default_instance_;
}

SearchNodeProto* SearchNodeProto::default_instance_ = NULL;

SearchNodeProto* SearchNodeProto::New() const {
  return new SearchNodeProto;
}

void SearchNodeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sel_ = 0u;
  }
  backtrack_.Clear();
  done_.Clear();
  enabled_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchNodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sel_)));
          set_has_sel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_backtrack;
        break;
      }
      
      // repeated uint32 backtrack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backtrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_backtrack())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_backtrack())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_backtrack;
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }
      
      // repeated uint32 done = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_done())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_done())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_done;
        if (input->ExpectTag(34)) goto parse_enabled;
        break;
      }
      
      // repeated .systematic.ActionInfoProto enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_enabled;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchNodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sel = 1;
  if (has_sel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sel(), output);
  }
  
  // repeated uint32 backtrack = 2;
  for (int i = 0; i < this->backtrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->backtrack(i), output);
  }
  
  // repeated uint32 done = 3;
  for (int i = 0; i < this->done_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->done(i), output);
  }
  
  // repeated .systematic.ActionInfoProto enabled = 4;
  for (int i = 0; i < this->enabled_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enabled(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchNodeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sel = 1;
  if (has_sel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sel(), target);
  }
  
  // repeated uint32 backtrack = 2;
  for (int i = 0; i < this->backtrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->backtrack(i), target);
  }
  
  // repeated uint32 done = 3;
  for (int i = 0; i < this->done_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->done(i), target);
  }
  
  // repeated .systematic.ActionInfoProto enabled = 4;
  for (int i = 0; i < this->enabled_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enabled(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchNodeProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sel = 1;
    if (has_sel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sel());
    }
    
  }
  // repeated uint32 backtrack = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->backtrack_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->backtrack(i));
    }
    total_size += 1 * this->backtrack_size() + data_size;
  }
  
  // repeated uint32 done = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->done_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->done(i));
    }
    total_size += 1 * this->done_size() + data_size;
  }
  
  // repeated .systematic.ActionInfoProto enabled = 4;
  total_size += 1 * this->enabled_size();
  for (int i = 0; i < this->enabled_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enabled(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchNodeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchNodeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchNodeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchNodeProto::MergeFrom(const SearchNodeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  backtrack_.MergeFrom(from.backtrack_);
  done_.MergeFrom(from.done_);
  enabled_.MergeFrom(from.enabled_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sel()) {
      set_sel(from.sel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchNodeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchNodeProto::CopyFrom(const SearchNodeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchNodeProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < enabled_size(); i++) {
    if (!this->enabled(i).IsInitialized()) return false;
  }
  return true;
}

void SearchNodeProto::Swap(SearchNodeProto* other) {
  if (other != this) {
    std::swap(sel_, other->sel_);
    backtrack_.Swap(&other->backtrack_);
    done_.Swap(&other->done_);
    enabled_.Swap(&other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchNodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchNodeProto_descriptor_;
  metadata.reflection = SearchNodeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchInfoProto::kDoneFieldNumber;
const int SearchInfoProto::kNumRunsFieldNumber;
const int SearchInfoProto::kNodeFieldNumber;
#endif  // !_MSC_VER

SearchInfoProto::SearchInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchInfoProto::InitAsDefaultInstance() {
}

SearchInfoProto::SearchInfoProto(const SearchInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchInfoProto::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  num_runs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchInfoProto::~SearchInfoProto() {
  SharedDtor();
}

void SearchInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchInfoProto_descriptor_;
}

const SearchInfoProto& SearchInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systematic_2fsearch_2eproto();  return *default_instance_;
}

SearchInfoProto* SearchInfoProto::default_instance_ = NULL;

SearchInfoProto* SearchInfoProto::New() const {
  return new SearchInfoProto;
}

void SearchInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    done_ = false;
    num_runs_ = 0u;
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool done = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_runs;
        break;
      }
      
      // required uint32 num_runs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_runs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_runs_)));
          set_has_num_runs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node;
        break;
      }
      
      // repeated .systematic.SearchNodeProto node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool done = 1;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->done(), output);
  }
  
  // required uint32 num_runs = 2;
  if (has_num_runs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_runs(), output);
  }
  
  // repeated .systematic.SearchNodeProto node = 3;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool done = 1;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->done(), target);
  }
  
  // required uint32 num_runs = 2;
  if (has_num_runs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_runs(), target);
  }
  
  // repeated .systematic.SearchNodeProto node = 3;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchInfoProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool done = 1;
    if (has_done()) {
      total_size += 1 + 1;
    }
    
    // required uint32 num_runs = 2;
    if (has_num_runs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_runs());
    }
    
  }
  // repeated .systematic.SearchNodeProto node = 3;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchInfoProto::MergeFrom(const SearchInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_num_runs()) {
      set_num_runs(from.num_runs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchInfoProto::CopyFrom(const SearchInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInfoProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void SearchInfoProto::Swap(SearchInfoProto* other) {
  if (other != this) {
    std::swap(done_, other->done_);
    std::swap(num_runs_, other->num_runs_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchInfoProto_descriptor_;
  metadata.reflection = SearchInfoProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace systematic

// @@protoc_insertion_point(global_scope)
