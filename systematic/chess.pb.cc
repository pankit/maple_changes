// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "systematic/chess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace systematic {

namespace {

const ::google::protobuf::Descriptor* ChessPorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessPorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessPorProto_VisitedStateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessPorProto_VisitedStateProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_systematic_2fchess_2eproto() {
  protobuf_AddDesc_systematic_2fchess_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "systematic/chess.proto");
  GOOGLE_CHECK(file != NULL);
  ChessPorProto_descriptor_ = file->message_type(0);
  static const int ChessPorProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto, num_execs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto, visited_state_),
  };
  ChessPorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChessPorProto_descriptor_,
      ChessPorProto::default_instance_,
      ChessPorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChessPorProto));
  ChessPorProto_VisitedStateProto_descriptor_ = ChessPorProto_descriptor_->nested_type(0);
  static const int ChessPorProto_VisitedStateProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto_VisitedStateProto, hash_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto_VisitedStateProto, preemptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto_VisitedStateProto, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto_VisitedStateProto, state_idx_),
  };
  ChessPorProto_VisitedStateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChessPorProto_VisitedStateProto_descriptor_,
      ChessPorProto_VisitedStateProto::default_instance_,
      ChessPorProto_VisitedStateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto_VisitedStateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPorProto_VisitedStateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChessPorProto_VisitedStateProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_systematic_2fchess_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChessPorProto_descriptor_, &ChessPorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChessPorProto_VisitedStateProto_descriptor_, &ChessPorProto_VisitedStateProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_systematic_2fchess_2eproto() {
  delete ChessPorProto::default_instance_;
  delete ChessPorProto_reflection_;
  delete ChessPorProto_VisitedStateProto::default_instance_;
  delete ChessPorProto_VisitedStateProto_reflection_;
}

void protobuf_AddDesc_systematic_2fchess_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::systematic::protobuf_AddDesc_systematic_2fprogram_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026systematic/chess.proto\022\nsystematic\032\030sy"
    "stematic/program.proto\"\306\001\n\rChessPorProto"
    "\022\021\n\tnum_execs\030\001 \002(\r\022B\n\rvisited_state\030\002 \003"
    "(\0132+.systematic.ChessPorProto.VisitedSta"
    "teProto\032^\n\021VisitedStateProto\022\020\n\010hash_val"
    "\030\001 \002(\r\022\023\n\013preemptions\030\002 \002(\r\022\017\n\007exec_id\030\003"
    " \002(\r\022\021\n\tstate_idx\030\004 \002(\r", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "systematic/chess.proto", &protobuf_RegisterTypes);
  ChessPorProto::default_instance_ = new ChessPorProto();
  ChessPorProto_VisitedStateProto::default_instance_ = new ChessPorProto_VisitedStateProto();
  ChessPorProto::default_instance_->InitAsDefaultInstance();
  ChessPorProto_VisitedStateProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_systematic_2fchess_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_systematic_2fchess_2eproto {
  StaticDescriptorInitializer_systematic_2fchess_2eproto() {
    protobuf_AddDesc_systematic_2fchess_2eproto();
  }
} static_descriptor_initializer_systematic_2fchess_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ChessPorProto_VisitedStateProto::kHashValFieldNumber;
const int ChessPorProto_VisitedStateProto::kPreemptionsFieldNumber;
const int ChessPorProto_VisitedStateProto::kExecIdFieldNumber;
const int ChessPorProto_VisitedStateProto::kStateIdxFieldNumber;
#endif  // !_MSC_VER

ChessPorProto_VisitedStateProto::ChessPorProto_VisitedStateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChessPorProto_VisitedStateProto::InitAsDefaultInstance() {
}

ChessPorProto_VisitedStateProto::ChessPorProto_VisitedStateProto(const ChessPorProto_VisitedStateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChessPorProto_VisitedStateProto::SharedCtor() {
  _cached_size_ = 0;
  hash_val_ = 0u;
  preemptions_ = 0u;
  exec_id_ = 0u;
  state_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChessPorProto_VisitedStateProto::~ChessPorProto_VisitedStateProto() {
  SharedDtor();
}

void ChessPorProto_VisitedStateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessPorProto_VisitedStateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPorProto_VisitedStateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessPorProto_VisitedStateProto_descriptor_;
}

const ChessPorProto_VisitedStateProto& ChessPorProto_VisitedStateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systematic_2fchess_2eproto();  return *default_instance_;
}

ChessPorProto_VisitedStateProto* ChessPorProto_VisitedStateProto::default_instance_ = NULL;

ChessPorProto_VisitedStateProto* ChessPorProto_VisitedStateProto::New() const {
  return new ChessPorProto_VisitedStateProto;
}

void ChessPorProto_VisitedStateProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_val_ = 0u;
    preemptions_ = 0u;
    exec_id_ = 0u;
    state_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChessPorProto_VisitedStateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hash_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_val_)));
          set_has_hash_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preemptions;
        break;
      }
      
      // required uint32 preemptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preemptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preemptions_)));
          set_has_preemptions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exec_id;
        break;
      }
      
      // required uint32 exec_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exec_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exec_id_)));
          set_has_exec_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state_idx;
        break;
      }
      
      // required uint32 state_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_idx_)));
          set_has_state_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChessPorProto_VisitedStateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hash_val = 1;
  if (has_hash_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash_val(), output);
  }
  
  // required uint32 preemptions = 2;
  if (has_preemptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preemptions(), output);
  }
  
  // required uint32 exec_id = 3;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exec_id(), output);
  }
  
  // required uint32 state_idx = 4;
  if (has_state_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state_idx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChessPorProto_VisitedStateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hash_val = 1;
  if (has_hash_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash_val(), target);
  }
  
  // required uint32 preemptions = 2;
  if (has_preemptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->preemptions(), target);
  }
  
  // required uint32 exec_id = 3;
  if (has_exec_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exec_id(), target);
  }
  
  // required uint32 state_idx = 4;
  if (has_state_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state_idx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChessPorProto_VisitedStateProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hash_val = 1;
    if (has_hash_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_val());
    }
    
    // required uint32 preemptions = 2;
    if (has_preemptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preemptions());
    }
    
    // required uint32 exec_id = 3;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exec_id());
    }
    
    // required uint32 state_idx = 4;
    if (has_state_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_idx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPorProto_VisitedStateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChessPorProto_VisitedStateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChessPorProto_VisitedStateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChessPorProto_VisitedStateProto::MergeFrom(const ChessPorProto_VisitedStateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash_val()) {
      set_hash_val(from.hash_val());
    }
    if (from.has_preemptions()) {
      set_preemptions(from.preemptions());
    }
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
    if (from.has_state_idx()) {
      set_state_idx(from.state_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChessPorProto_VisitedStateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPorProto_VisitedStateProto::CopyFrom(const ChessPorProto_VisitedStateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPorProto_VisitedStateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ChessPorProto_VisitedStateProto::Swap(ChessPorProto_VisitedStateProto* other) {
  if (other != this) {
    std::swap(hash_val_, other->hash_val_);
    std::swap(preemptions_, other->preemptions_);
    std::swap(exec_id_, other->exec_id_);
    std::swap(state_idx_, other->state_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChessPorProto_VisitedStateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessPorProto_VisitedStateProto_descriptor_;
  metadata.reflection = ChessPorProto_VisitedStateProto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChessPorProto::kNumExecsFieldNumber;
const int ChessPorProto::kVisitedStateFieldNumber;
#endif  // !_MSC_VER

ChessPorProto::ChessPorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChessPorProto::InitAsDefaultInstance() {
}

ChessPorProto::ChessPorProto(const ChessPorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChessPorProto::SharedCtor() {
  _cached_size_ = 0;
  num_execs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChessPorProto::~ChessPorProto() {
  SharedDtor();
}

void ChessPorProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessPorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessPorProto_descriptor_;
}

const ChessPorProto& ChessPorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systematic_2fchess_2eproto();  return *default_instance_;
}

ChessPorProto* ChessPorProto::default_instance_ = NULL;

ChessPorProto* ChessPorProto::New() const {
  return new ChessPorProto;
}

void ChessPorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_execs_ = 0u;
  }
  visited_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChessPorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_execs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_execs_)));
          set_has_num_execs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_visited_state;
        break;
      }
      
      // repeated .systematic.ChessPorProto.VisitedStateProto visited_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visited_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visited_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_visited_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChessPorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num_execs = 1;
  if (has_num_execs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_execs(), output);
  }
  
  // repeated .systematic.ChessPorProto.VisitedStateProto visited_state = 2;
  for (int i = 0; i < this->visited_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->visited_state(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChessPorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num_execs = 1;
  if (has_num_execs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_execs(), target);
  }
  
  // repeated .systematic.ChessPorProto.VisitedStateProto visited_state = 2;
  for (int i = 0; i < this->visited_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->visited_state(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChessPorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_execs = 1;
    if (has_num_execs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_execs());
    }
    
  }
  // repeated .systematic.ChessPorProto.VisitedStateProto visited_state = 2;
  total_size += 1 * this->visited_state_size();
  for (int i = 0; i < this->visited_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visited_state(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChessPorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChessPorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChessPorProto::MergeFrom(const ChessPorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  visited_state_.MergeFrom(from.visited_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_execs()) {
      set_num_execs(from.num_execs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChessPorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPorProto::CopyFrom(const ChessPorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPorProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < visited_state_size(); i++) {
    if (!this->visited_state(i).IsInitialized()) return false;
  }
  return true;
}

void ChessPorProto::Swap(ChessPorProto* other) {
  if (other != this) {
    std::swap(num_execs_, other->num_execs_);
    visited_state_.Swap(&other->visited_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChessPorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessPorProto_descriptor_;
  metadata.reflection = ChessPorProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace systematic

// @@protoc_insertion_point(global_scope)
