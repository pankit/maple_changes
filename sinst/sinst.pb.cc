// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sinst/sinst.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sinst {

namespace {

const ::google::protobuf::Descriptor* SharedInstProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedInstProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedInstTableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedInstTableProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sinst_2fsinst_2eproto() {
  protobuf_AddDesc_sinst_2fsinst_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sinst/sinst.proto");
  GOOGLE_CHECK(file != NULL);
  SharedInstProto_descriptor_ = file->message_type(0);
  static const int SharedInstProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedInstProto, inst_id_),
  };
  SharedInstProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedInstProto_descriptor_,
      SharedInstProto::default_instance_,
      SharedInstProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedInstProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedInstProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedInstProto));
  SharedInstTableProto_descriptor_ = file->message_type(1);
  static const int SharedInstTableProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedInstTableProto, shared_inst_),
  };
  SharedInstTableProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedInstTableProto_descriptor_,
      SharedInstTableProto::default_instance_,
      SharedInstTableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedInstTableProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedInstTableProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedInstTableProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sinst_2fsinst_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedInstProto_descriptor_, &SharedInstProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedInstTableProto_descriptor_, &SharedInstTableProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sinst_2fsinst_2eproto() {
  delete SharedInstProto::default_instance_;
  delete SharedInstProto_reflection_;
  delete SharedInstTableProto::default_instance_;
  delete SharedInstTableProto_reflection_;
}

void protobuf_AddDesc_sinst_2fsinst_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021sinst/sinst.proto\022\005sinst\"\"\n\017SharedInst"
    "Proto\022\017\n\007inst_id\030\001 \002(\r\"C\n\024SharedInstTabl"
    "eProto\022+\n\013shared_inst\030\001 \003(\0132\026.sinst.Shar"
    "edInstProto", 131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sinst/sinst.proto", &protobuf_RegisterTypes);
  SharedInstProto::default_instance_ = new SharedInstProto();
  SharedInstTableProto::default_instance_ = new SharedInstTableProto();
  SharedInstProto::default_instance_->InitAsDefaultInstance();
  SharedInstTableProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sinst_2fsinst_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sinst_2fsinst_2eproto {
  StaticDescriptorInitializer_sinst_2fsinst_2eproto() {
    protobuf_AddDesc_sinst_2fsinst_2eproto();
  }
} static_descriptor_initializer_sinst_2fsinst_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SharedInstProto::kInstIdFieldNumber;
#endif  // !_MSC_VER

SharedInstProto::SharedInstProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedInstProto::InitAsDefaultInstance() {
}

SharedInstProto::SharedInstProto(const SharedInstProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedInstProto::SharedCtor() {
  _cached_size_ = 0;
  inst_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedInstProto::~SharedInstProto() {
  SharedDtor();
}

void SharedInstProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SharedInstProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedInstProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedInstProto_descriptor_;
}

const SharedInstProto& SharedInstProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sinst_2fsinst_2eproto();  return *default_instance_;
}

SharedInstProto* SharedInstProto::default_instance_ = NULL;

SharedInstProto* SharedInstProto::New() const {
  return new SharedInstProto;
}

void SharedInstProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inst_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedInstProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 inst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedInstProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 inst_id = 1;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inst_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedInstProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 inst_id = 1;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inst_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedInstProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 inst_id = 1;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedInstProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedInstProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedInstProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedInstProto::MergeFrom(const SharedInstProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedInstProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedInstProto::CopyFrom(const SharedInstProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedInstProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SharedInstProto::Swap(SharedInstProto* other) {
  if (other != this) {
    std::swap(inst_id_, other->inst_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedInstProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedInstProto_descriptor_;
  metadata.reflection = SharedInstProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedInstTableProto::kSharedInstFieldNumber;
#endif  // !_MSC_VER

SharedInstTableProto::SharedInstTableProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedInstTableProto::InitAsDefaultInstance() {
}

SharedInstTableProto::SharedInstTableProto(const SharedInstTableProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedInstTableProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedInstTableProto::~SharedInstTableProto() {
  SharedDtor();
}

void SharedInstTableProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SharedInstTableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedInstTableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedInstTableProto_descriptor_;
}

const SharedInstTableProto& SharedInstTableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sinst_2fsinst_2eproto();  return *default_instance_;
}

SharedInstTableProto* SharedInstTableProto::default_instance_ = NULL;

SharedInstTableProto* SharedInstTableProto::New() const {
  return new SharedInstTableProto;
}

void SharedInstTableProto::Clear() {
  shared_inst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedInstTableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sinst.SharedInstProto shared_inst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_inst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shared_inst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shared_inst;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedInstTableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sinst.SharedInstProto shared_inst = 1;
  for (int i = 0; i < this->shared_inst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shared_inst(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedInstTableProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sinst.SharedInstProto shared_inst = 1;
  for (int i = 0; i < this->shared_inst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shared_inst(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedInstTableProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .sinst.SharedInstProto shared_inst = 1;
  total_size += 1 * this->shared_inst_size();
  for (int i = 0; i < this->shared_inst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shared_inst(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedInstTableProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedInstTableProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedInstTableProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedInstTableProto::MergeFrom(const SharedInstTableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  shared_inst_.MergeFrom(from.shared_inst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedInstTableProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedInstTableProto::CopyFrom(const SharedInstTableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedInstTableProto::IsInitialized() const {
  
  for (int i = 0; i < shared_inst_size(); i++) {
    if (!this->shared_inst(i).IsInitialized()) return false;
  }
  return true;
}

void SharedInstTableProto::Swap(SharedInstTableProto* other) {
  if (other != this) {
    shared_inst_.Swap(&other->shared_inst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedInstTableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedInstTableProto_descriptor_;
  metadata.reflection = SharedInstTableProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sinst

// @@protoc_insertion_point(global_scope)
