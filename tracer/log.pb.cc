// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracer/log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tracer {

namespace {

const ::google::protobuf::Descriptor* LogEntryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetaProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSliceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSliceProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEntryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracer_2flog_2eproto() {
  protobuf_AddDesc_tracer_2flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracer/log.proto");
  GOOGLE_CHECK(file != NULL);
  LogEntryProto_descriptor_ = file->message_type(0);
  static const int LogEntryProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, thd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, thd_clk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, str_arg_),
  };
  LogEntryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntryProto_descriptor_,
      LogEntryProto::default_instance_,
      LogEntryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntryProto));
  LogMetaProto_descriptor_ = file->message_type(1);
  static const int LogMetaProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetaProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetaProto, slice_count_),
  };
  LogMetaProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogMetaProto_descriptor_,
      LogMetaProto::default_instance_,
      LogMetaProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetaProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetaProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogMetaProto));
  LogSliceProto_descriptor_ = file->message_type(2);
  static const int LogSliceProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSliceProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSliceProto, slice_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSliceProto, entry_),
  };
  LogSliceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSliceProto_descriptor_,
      LogSliceProto::default_instance_,
      LogSliceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSliceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSliceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSliceProto));
  LogEntryType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracer_2flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntryProto_descriptor_, &LogEntryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogMetaProto_descriptor_, &LogMetaProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSliceProto_descriptor_, &LogSliceProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracer_2flog_2eproto() {
  delete LogEntryProto::default_instance_;
  delete LogEntryProto_reflection_;
  delete LogMetaProto::default_instance_;
  delete LogMetaProto_reflection_;
  delete LogSliceProto::default_instance_;
  delete LogSliceProto_reflection_;
}

void protobuf_AddDesc_tracer_2flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tracer/log.proto\022\006tracer\"\203\001\n\rLogEntryP"
    "roto\022\"\n\004type\030\001 \002(\0162\024.tracer.LogEntryType"
    "\022\016\n\006thd_id\030\002 \001(\004\022\017\n\007thd_clk\030\003 \001(\004\022\017\n\007ins"
    "t_id\030\004 \001(\r\022\013\n\003arg\030\005 \003(\004\022\017\n\007str_arg\030\006 \003(\t"
    "\"0\n\014LogMetaProto\022\013\n\003uid\030\001 \002(\004\022\023\n\013slice_c"
    "ount\030\003 \002(\r\"T\n\rLogSliceProto\022\013\n\003uid\030\001 \002(\004"
    "\022\020\n\010slice_no\030\002 \002(\r\022$\n\005entry\030\003 \003(\0132\025.trac"
    "er.LogEntryProto*\277\r\n\014LogEntryType\022\025\n\021LOG"
    "_ENTRY_INVALID\020\000\022\033\n\027LOG_ENTRY_PROGRAM_ST"
    "ART\020\001\022\032\n\026LOG_ENTRY_PROGRAM_EXIT\020\002\022\030\n\024LOG"
    "_ENTRY_IMAGE_LOAD\020\003\022\032\n\026LOG_ENTRY_IMAGE_U"
    "NLOAD\020\004\022\033\n\027LOG_ENTRY_SYSCALL_ENTRY\020\005\022\032\n\026"
    "LOG_ENTRY_SYSCALL_EXIT\020\006\022\035\n\031LOG_ENTRY_SI"
    "GNAL_RECEIVED\020\007\022\032\n\026LOG_ENTRY_THREAD_STAR"
    "T\020\010\022\031\n\025LOG_ENTRY_THREAD_EXIT\020\t\022\022\n\016LOG_EN"
    "TRY_MAIN\020\n\022\031\n\025LOG_ENTRY_THREAD_MAIN\020\013\022\035\n"
    "\031LOG_ENTRY_BEFORE_MEM_READ\020\014\022\034\n\030LOG_ENTR"
    "Y_AFTER_MEM_READ\020\r\022\036\n\032LOG_ENTRY_BEFORE_M"
    "EM_WRITE\020\016\022\035\n\031LOG_ENTRY_AFTER_MEM_WRITE\020"
    "\017\022 \n\034LOG_ENTRY_BEFORE_ATOMIC_INST\020\020\022\037\n\033L"
    "OG_ENTRY_AFTER_ATOMIC_INST\020\021\022#\n\037LOG_ENTR"
    "Y_BEFORE_PTHREAD_CREATE\020e\022\"\n\036LOG_ENTRY_A"
    "FTER_PTHREAD_CREATE\020f\022!\n\035LOG_ENTRY_BEFOR"
    "E_PTHREAD_JOIN\020g\022 \n\034LOG_ENTRY_AFTER_PTHR"
    "EAD_JOIN\020h\022*\n&LOG_ENTRY_BEFORE_PTHREAD_M"
    "UTEX_TRYLOCK\020i\022)\n%LOG_ENTRY_AFTER_PTHREA"
    "D_MUTEX_TRYLOCK\020j\022\'\n#LOG_ENTRY_BEFORE_PT"
    "HREAD_MUTEX_LOCK\020k\022&\n\"LOG_ENTRY_AFTER_PT"
    "HREAD_MUTEX_LOCK\020l\022)\n%LOG_ENTRY_BEFORE_P"
    "THREAD_MUTEX_UNLOCK\020m\022(\n$LOG_ENTRY_AFTER"
    "_PTHREAD_MUTEX_UNLOCK\020n\022(\n$LOG_ENTRY_BEF"
    "ORE_PTHREAD_COND_SIGNAL\020o\022\'\n#LOG_ENTRY_A"
    "FTER_PTHREAD_COND_SIGNAL\020p\022+\n\'LOG_ENTRY_"
    "BEFORE_PTHREAD_COND_BROADCAST\020q\022*\n&LOG_E"
    "NTRY_AFTER_PTHREAD_COND_BROADCAST\020r\022&\n\"L"
    "OG_ENTRY_BEFORE_PTHREAD_COND_WAIT\020s\022%\n!L"
    "OG_ENTRY_AFTER_PTHREAD_COND_WAIT\020t\022+\n\'LO"
    "G_ENTRY_BEFORE_PTHREAD_COND_TIMEDWAIT\020u\022"
    "*\n&LOG_ENTRY_AFTER_PTHREAD_COND_TIMEDWAI"
    "T\020v\022)\n%LOG_ENTRY_BEFORE_PTHREAD_BARRIER_"
    "INIT\020w\022(\n$LOG_ENTRY_AFTER_PTHREAD_BARRIE"
    "R_INIT\020x\022)\n%LOG_ENTRY_BEFORE_PTHREAD_BAR"
    "RIER_WAIT\020y\022(\n$LOG_ENTRY_AFTER_PTHREAD_B"
    "ARRIER_WAIT\020z\022\034\n\027LOG_ENTRY_BEFORE_MALLOC"
    "\020\311\001\022\033\n\026LOG_ENTRY_AFTER_MALLOC\020\312\001\022\034\n\027LOG_"
    "ENTRY_BEFORE_CALLOC\020\313\001\022\033\n\026LOG_ENTRY_AFTE"
    "R_CALLOC\020\314\001\022\035\n\030LOG_ENTRY_BEFORE_REALLOC\020"
    "\315\001\022\034\n\027LOG_ENTRY_AFTER_REALLOC\020\316\001\022\032\n\025LOG_"
    "ENTRY_BEFORE_FREE\020\317\001\022\031\n\024LOG_ENTRY_AFTER_"
    "FREE\020\320\001\022\034\n\027LOG_ENTRY_BEFORE_VALLOC\020\321\001\022\033\n"
    "\026LOG_ENTRY_AFTER_VALLOC\020\322\001", 2026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracer/log.proto", &protobuf_RegisterTypes);
  LogEntryProto::default_instance_ = new LogEntryProto();
  LogMetaProto::default_instance_ = new LogMetaProto();
  LogSliceProto::default_instance_ = new LogSliceProto();
  LogEntryProto::default_instance_->InitAsDefaultInstance();
  LogMetaProto::default_instance_->InitAsDefaultInstance();
  LogSliceProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracer_2flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracer_2flog_2eproto {
  StaticDescriptorInitializer_tracer_2flog_2eproto() {
    protobuf_AddDesc_tracer_2flog_2eproto();
  }
} static_descriptor_initializer_tracer_2flog_2eproto_;

const ::google::protobuf::EnumDescriptor* LogEntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryType_descriptor_;
}
bool LogEntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntryProto::kTypeFieldNumber;
const int LogEntryProto::kThdIdFieldNumber;
const int LogEntryProto::kThdClkFieldNumber;
const int LogEntryProto::kInstIdFieldNumber;
const int LogEntryProto::kArgFieldNumber;
const int LogEntryProto::kStrArgFieldNumber;
#endif  // !_MSC_VER

LogEntryProto::LogEntryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEntryProto::InitAsDefaultInstance() {
}

LogEntryProto::LogEntryProto(const LogEntryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntryProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  thd_id_ = GOOGLE_ULONGLONG(0);
  thd_clk_ = GOOGLE_ULONGLONG(0);
  inst_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntryProto::~LogEntryProto() {
  SharedDtor();
}

void LogEntryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogEntryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryProto_descriptor_;
}

const LogEntryProto& LogEntryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracer_2flog_2eproto();  return *default_instance_;
}

LogEntryProto* LogEntryProto::default_instance_ = NULL;

LogEntryProto* LogEntryProto::New() const {
  return new LogEntryProto;
}

void LogEntryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    thd_id_ = GOOGLE_ULONGLONG(0);
    thd_clk_ = GOOGLE_ULONGLONG(0);
    inst_id_ = 0u;
  }
  arg_.Clear();
  str_arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tracer.LogEntryType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tracer::LogEntryType_IsValid(value)) {
            set_type(static_cast< tracer::LogEntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thd_id;
        break;
      }
      
      // optional uint64 thd_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thd_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thd_id_)));
          set_has_thd_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_thd_clk;
        break;
      }
      
      // optional uint64 thd_clk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thd_clk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thd_clk_)));
          set_has_thd_clk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inst_id;
        break;
      }
      
      // optional uint32 inst_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arg;
        break;
      }
      
      // repeated uint64 arg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arg;
        if (input->ExpectTag(50)) goto parse_str_arg;
        break;
      }
      
      // repeated string str_arg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_arg(0).data(), this->str_arg(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_str_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tracer.LogEntryType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint64 thd_id = 2;
  if (has_thd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thd_id(), output);
  }
  
  // optional uint64 thd_clk = 3;
  if (has_thd_clk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->thd_clk(), output);
  }
  
  // optional uint32 inst_id = 4;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inst_id(), output);
  }
  
  // repeated uint64 arg = 5;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->arg(i), output);
  }
  
  // repeated string str_arg = 6;
  for (int i = 0; i < this->str_arg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str_arg(i).data(), this->str_arg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->str_arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEntryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tracer.LogEntryType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint64 thd_id = 2;
  if (has_thd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thd_id(), target);
  }
  
  // optional uint64 thd_clk = 3;
  if (has_thd_clk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->thd_clk(), target);
  }
  
  // optional uint32 inst_id = 4;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inst_id(), target);
  }
  
  // repeated uint64 arg = 5;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->arg(i), target);
  }
  
  // repeated string str_arg = 6;
  for (int i = 0; i < this->str_arg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_arg(i).data(), this->str_arg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->str_arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEntryProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tracer.LogEntryType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint64 thd_id = 2;
    if (has_thd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thd_id());
    }
    
    // optional uint64 thd_clk = 3;
    if (has_thd_clk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thd_clk());
    }
    
    // optional uint32 inst_id = 4;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_id());
    }
    
  }
  // repeated uint64 arg = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  // repeated string str_arg = 6;
  total_size += 1 * this->str_arg_size();
  for (int i = 0; i < this->str_arg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_arg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntryProto::MergeFrom(const LogEntryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  str_arg_.MergeFrom(from.str_arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_thd_id()) {
      set_thd_id(from.thd_id());
    }
    if (from.has_thd_clk()) {
      set_thd_clk(from.thd_clk());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryProto::CopyFrom(const LogEntryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LogEntryProto::Swap(LogEntryProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(thd_id_, other->thd_id_);
    std::swap(thd_clk_, other->thd_clk_);
    std::swap(inst_id_, other->inst_id_);
    arg_.Swap(&other->arg_);
    str_arg_.Swap(&other->str_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntryProto_descriptor_;
  metadata.reflection = LogEntryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogMetaProto::kUidFieldNumber;
const int LogMetaProto::kSliceCountFieldNumber;
#endif  // !_MSC_VER

LogMetaProto::LogMetaProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogMetaProto::InitAsDefaultInstance() {
}

LogMetaProto::LogMetaProto(const LogMetaProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogMetaProto::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  slice_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetaProto::~LogMetaProto() {
  SharedDtor();
}

void LogMetaProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogMetaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetaProto_descriptor_;
}

const LogMetaProto& LogMetaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracer_2flog_2eproto();  return *default_instance_;
}

LogMetaProto* LogMetaProto::default_instance_ = NULL;

LogMetaProto* LogMetaProto::New() const {
  return new LogMetaProto;
}

void LogMetaProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    slice_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogMetaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slice_count;
        break;
      }
      
      // required uint32 slice_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_count_)));
          set_has_slice_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMetaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required uint32 slice_count = 3;
  if (has_slice_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slice_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogMetaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required uint32 slice_count = 3;
  if (has_slice_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slice_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogMetaProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required uint32 slice_count = 3;
    if (has_slice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetaProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogMetaProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogMetaProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMetaProto::MergeFrom(const LogMetaProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_slice_count()) {
      set_slice_count(from.slice_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogMetaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetaProto::CopyFrom(const LogMetaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetaProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LogMetaProto::Swap(LogMetaProto* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(slice_count_, other->slice_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogMetaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetaProto_descriptor_;
  metadata.reflection = LogMetaProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSliceProto::kUidFieldNumber;
const int LogSliceProto::kSliceNoFieldNumber;
const int LogSliceProto::kEntryFieldNumber;
#endif  // !_MSC_VER

LogSliceProto::LogSliceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSliceProto::InitAsDefaultInstance() {
}

LogSliceProto::LogSliceProto(const LogSliceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSliceProto::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  slice_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSliceProto::~LogSliceProto() {
  SharedDtor();
}

void LogSliceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogSliceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSliceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSliceProto_descriptor_;
}

const LogSliceProto& LogSliceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracer_2flog_2eproto();  return *default_instance_;
}

LogSliceProto* LogSliceProto::default_instance_ = NULL;

LogSliceProto* LogSliceProto::New() const {
  return new LogSliceProto;
}

void LogSliceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    slice_no_ = 0u;
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSliceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slice_no;
        break;
      }
      
      // required uint32 slice_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slice_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_no_)));
          set_has_slice_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        break;
      }
      
      // repeated .tracer.LogEntryProto entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSliceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required uint32 slice_no = 2;
  if (has_slice_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slice_no(), output);
  }
  
  // repeated .tracer.LogEntryProto entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSliceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required uint32 slice_no = 2;
  if (has_slice_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slice_no(), target);
  }
  
  // repeated .tracer.LogEntryProto entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSliceProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required uint32 slice_no = 2;
    if (has_slice_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_no());
    }
    
  }
  // repeated .tracer.LogEntryProto entry = 3;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSliceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSliceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSliceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSliceProto::MergeFrom(const LogSliceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_slice_no()) {
      set_slice_no(from.slice_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSliceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSliceProto::CopyFrom(const LogSliceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSliceProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void LogSliceProto::Swap(LogSliceProto* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(slice_no_, other->slice_no_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSliceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSliceProto_descriptor_;
  metadata.reflection = LogSliceProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracer

// @@protoc_insertion_point(global_scope)
